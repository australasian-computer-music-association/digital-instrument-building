<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- InstanceBegin template="/Templates/level2.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<!-- InstanceBeginEditable name="doctitle" -->
<title>Digital Instrument Building</title>
<!-- InstanceEndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<META NAME="DC.Creator" CONTENT="PersonalName= Andrew R. Brown  ">
<META NAME="DC.Creator.Email" CONTENT="algorithmicmusic@gmail.com,">
<META NAME="DC.Rights" CONTENT="Andrew R. Brown ">
<META NAME="DC.Title" CONTENT="Digital Instrument Building - Music software development with jMusic">
<META NAME="DC.Title.Alternative" content ="Music software development with jMusic">
<META NAME="DC.Subject" CONTENT="music, java, composition, algorithmic, digital music, generative music, instrument building, music analysing software development, Australia">
<META NAME="DC.Description" CONTENT="This site is a tutorial resource designed to assist in the training and self education of up-and-coming digital instrument developers. The tutorials cover topics including music software design, audio synthesis, digital signal processing, compositional systems, and computer programming concepts. ">
<META NAME="DC.Language" SCHEME="rfc1766" CONTENT="en-au">
<META NAME="DC.Audience" CONTENT="All">
<META NAME="DC.Date.Created" CONTENT="06-04-2003">
<META NAME="DC.Availability" CONTENT="PersonalName= Andrew R. Brown; email= algorithmicmusic@gmail.com">

<!-- ImageReady Preload Script (menubanner2.psd) -->
<SCRIPT TYPE="text/javascript">
<!--

function newImage(arg) {
	if (document.images) {
		rslt = new Image();
		rslt.src = arg;
		return rslt;
	}
}

function changeImages() {
	if (document.images && (preloadFlag == true)) {
		for (var i=0; i<changeImages.arguments.length; i+=2) {
			document[changeImages.arguments[i]].src = changeImages.arguments[i+1];
		}
	}
}

var preloadFlag = false;
function preloadImages() {
	if (document.images) {
		Music_algorithms_over = newImage("images/Music-algorithms-over.jpg");
		Interfaces_over = newImage("images/Interfaces-over.jpg");
		Programming_over = newImage("images/Programming-over.jpg");
		Acoustics_over = newImage("images/Acoustics-over.jpg");
		context_over = newImage("images/context-over.jpg");
		audio_over = newImage("images/audio-over.jpg");
		MIDI_over = newImage("images/MIDI-over.jpg");
		preloadFlag = true;
	}
}

// -->
</SCRIPT>
<!-- End Preload Script -->
<script language="JavaScript" type="text/JavaScript">
<!--


function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.01
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && d.getElementById) x=d.getElementById(n); return x;
}
//-->
</script>
<script language="JavaScript" type="text/JavaScript">
<!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName=="Netscape")&&(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);

function MM_nbGroup(event, grpName) { //v6.0
  var i,img,nbArr,args=MM_nbGroup.arguments;
  if (event == "init" && args.length > 2) {
    if ((img = MM_findObj(args[2])) != null && !img.MM_init) {
      img.MM_init = true; img.MM_up = args[3]; img.MM_dn = img.src;
      if ((nbArr = document[grpName]) == null) nbArr = document[grpName] = new Array();
      nbArr[nbArr.length] = img;
      for (i=4; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
        if (!img.MM_up) img.MM_up = img.src;
        img.src = img.MM_dn = args[i+1];
        nbArr[nbArr.length] = img;
    } }
  } else if (event == "over") {
    document.MM_nbOver = nbArr = new Array();
    for (i=1; i < args.length-1; i+=3) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = (img.MM_dn && args[i+2]) ? args[i+2] : ((args[i+1])? args[i+1] : img.MM_up);
      nbArr[nbArr.length] = img;
    }
  } else if (event == "out" ) {
    for (i=0; i < document.MM_nbOver.length; i++) {
      img = document.MM_nbOver[i]; img.src = (img.MM_dn) ? img.MM_dn : img.MM_up; }
  } else if (event == "down") {
    nbArr = document[grpName];
    if (nbArr)
      for (i=0; i < nbArr.length; i++) { img=nbArr[i]; img.src = img.MM_up; img.MM_dn = 0; }
    document[grpName] = nbArr = new Array();
    for (i=2; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = img.MM_dn = (args[i+1])? args[i+1] : img.MM_up;
      nbArr[nbArr.length] = img;
  } }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}
//-->
</script>
<!-- InstanceBeginEditable name="head" -->
<script language="JavaScript" type="text/JavaScript">
<!--
function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}
//-->
</script>
<!-- InstanceEndEditable -->
<link href="../style/main.css" rel="stylesheet" type="text/css">
</head>
<body leftmargin="3" topmargin="3" marginwidth="0" marginheight="0"  onLoad="MM_preloadImages('../images/banner/audio-over.jpg','../images/banner/MIDI-over.jpg','../images/banner/Music-algorithms-over.jpg','../images/banner/Interfaces-over.jpg','../images/banner/Programming-over.jpg','../images/banner/Acoustics-over.jpg','../images/banner/context-over.jpg','../images/banner/banner_08.gif','../images/buttons/A_musdat_do.jpg','../images/buttons/A_input_do.jpg','../images/buttons/A_synth_do.jpg')">
<table width="729" border="0" align="center">
  <tr> 
    <td colspan="5" align="left"> <div align="center"> 
        <table border="0" align="left" cellpadding="0" cellspacing="0">
          <tr> 
            <td colspan="8"><img src="../images/banner.jpg" alt="Home" width=758 height=57 border="0" usemap="#Map5"></td>
          </tr>
          <tr> 
            <td width="50"><a href="../Audio/audio.htm" target="_top" onClick="MM_nbGroup('down','group1','Audio','../images/banner/audio-over.jpg',1)" onMouseOver="MM_nbGroup('over','Audio','../images/banner/audio-over.jpg','../images/banner/audio-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/audio.jpg" alt="audio" name="Audio" width="50" height="24" border="0" onload=""></a></td>
            <td width="47"><a href="midi.htm" target="_top" onClick="MM_nbGroup('down','group1','MIDI','../images/banner/MIDI-over.jpg',1)" onMouseOver="MM_nbGroup('over','MIDI','../images/banner/MIDI-over.jpg','../images/banner/MIDI-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/MIDI.jpg" alt="MIDI" name="MIDI" width="47" height="24" border="0" onload=""></a></td>
            <td width="117"><a href="../musalgo/musalgo.htm" target="_top" onClick="MM_nbGroup('down','group1','musalgorithms','../images/banner/Music-algorithms-over.jpg',1)" onMouseOver="MM_nbGroup('over','musalgorithms','../images/banner/Music-algorithms-over.jpg','../images/banner/Music-algorithms-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/Music-algorithms.jpg" alt="Music Algorithms" name="musalgorithms" width="117" height="24" border="0" onload=""></a></td>
            <td width="88"><a href="../interfaces/interface.htm" target="_top" onClick="MM_nbGroup('down','group1','Interfaces','../images/banner/Interfaces-over.jpg',1)" onMouseOver="MM_nbGroup('over','Interfaces','../images/banner/Interfaces-over.jpg','../images/banner/Interfaces-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/Interfaces.jpg" alt="Interfaces" name="Interfaces" width="88" height="24" border="0" onload=""></a></td>
            <td width="103"><a href="../programming/programming.htm" target="_top" onClick="MM_nbGroup('down','group1','Programming','../images/banner/Programming-over.jpg',1)" onMouseOver="MM_nbGroup('over','Programming','../images/banner/Programming-over.jpg','../images/banner/Programming-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/Programming.jpg" alt="Programming" name="Programming" width="103" height="24" border="0" onload=""></a></td>
            <td width="81"><a href="../acoustics/acoustics.htm" target="_top" onClick="MM_nbGroup('down','group1','Acoustics','../images/banner/Acoustics-over.jpg',1)" onMouseOver="MM_nbGroup('over','Acoustics','../images/banner/Acoustics-over.jpg','../images/banner/Acoustics-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/Acoustics.jpg" alt="Acoustics" name="Acoustics" width="81" height="24" border="0" onload=""></a></td>
            <td width="100"><a href="../context/context.htm" target="_top" onClick="MM_nbGroup('down','group1','Context','../images/banner/context-over.jpg',1)" onMouseOver="MM_nbGroup('over','Context','../images/banner/context-over.jpg','../images/banner/context-over.jpg',1)" onMouseOut="MM_nbGroup('out')"><img src="../images/banner/context.jpg" alt="Context" name="Context" width="100" height="24" border="0" onload=""></a></td>
            <td width="156"><img src="../images/banner/banner_09.gif" width="172" height="24"></td>
          </tr>
        </table>
      </div></td>
  </tr>
  <tr> 
    <td width="3" align="left"> <div align="right"></div>
      <div align="right"></div>
      <div align="right"></div></td>
    <!-- InstanceBeginEditable name="tracker" --> 
    <td height="16" colspan="2" rowspan="2" align="left"><a href="../Audio/audio.htm">&gt; 
      </a><a href="../Audio/midi.htm">MIDI </a></td>
    <!-- InstanceEndEditable --> 
    <td width="3" rowspan="2" align="left">&nbsp;</td>
    <td rowspan="2" align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td width="3" rowspan="3" align="left">&nbsp;</td>
  </tr>
  <tr> <!-- InstanceBeginEditable name="header" --> 
    <td colspan="2" align="left" valign="top"><img src="../images/HEmidi.jpg" alt="MIDI" width="113" height="23"></td>
    <!-- InstanceEndEditable --> <!-- InstanceBeginEditable name="vrule" --> 
    <td align="left" valign="top">&nbsp;</td>
    <!-- InstanceEndEditable --> <!-- InstanceBeginEditable name="heading" -->
    <td align="left" valign="top"><strong>TUTORIALS:</strong></td>
    <!-- InstanceEndEditable --></tr>
  <tr> <!-- InstanceBeginEditable name="image" --> 
    <td width="68" height="21" align="left" valign="top" nowrap> <h4 align="left"><img src="../images/wave002.gif" alt="MIDI" width="65" height="60"></h4></td>
    <!-- InstanceEndEditable --> <!-- InstanceBeginEditable name="intro" -->
    <td width="343" align="left" valign="top" nowrap>The Musical Instrument Digital 
      Interface protocol is wide spread<br>
      and in this section we examine how to read and write MIDI data<br>
      and discuss basic issues of sending a receiving musical events, <br>
      as opposed to audio streams.</td>
    <!-- InstanceEndEditable --><!-- InstanceBeginEditable name="vrule1" --> 
    <td rowspan="16" align="left" valign="top"><div align="right"></div></td>
    <!-- InstanceEndEditable --><!-- InstanceBeginEditable name="tutorials" --> 
    <td width="221" rowspan="16" valign="top">
<div align="left">
        <div align="left"> 
          <p class="margin"><a href="musdata.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('musdata','','../images/buttons/A_musdat_do.jpg',1)"><img src="../images/buttons/A_musdat_up.jpg" alt="Musical Data" name="musdata" width="113" height="23" border="0"></a><a href="musdata.htm">&gt;&gt; 
            read more.</a><br>
            This section examines the way<br>
            that musical ideas a represented <br>
            as digital data.<br>
            <br>
            It pays particular attention to the<br>
            data structures used by the<br>
            development libraries (jMusic etc.)<br>
            and how they relate to the MIDI data <br>
            structures.<br>
            <br>
            <a href="in_out.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('Input','','../images/buttons/A_input_do.jpg',1)"><img src="../images/buttons/A_input_up.jpg" alt="Input/output" name="Input" width="113" height="23" border="0"></a><a href="in_out.htm">&gt;&gt; 
            read more</a><br>
            Sending and receiving musical <br>
            messages is important to connecting<br>
            with external devices.<br>
            <br>
            This section discusses the methods <br>
            for and issues involved in making <br>
            your instrument communicate in this<br>
            way.<br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
          </p>
          <br>
        </div>
        </div>
      </td>
    <!-- InstanceEndEditable --></tr>
  <tr> 
    <td align="left"> <div align="left"><br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
      </div></td>
    <!-- InstanceBeginEditable name="content" --> 
    <td colspan="2" rowspan="16" align="left" valign="top"><h2><img src="../images/hrule.jpg" width="385" height="4"><br>
        <br>
        MIDI - By Paul Doornbusch </h2>
      <p>MIDI, or Musical Instrument Digital Interface, is a standard for digital 
        communication between digital devices that is geared towards the real-time 
        needs of traditional music. It is important to remember that it is not 
        the audio that is being passed around, but only the control data messages. 
        The messages can be as simple as &#8216;play the note C3 now until I tell 
        you to stop&#8217;, to more complex messages such as, &#8216;adjust the 
        pitchbend of note E4 up 5 more places&#8217;. Roland and Sequential Circuits 
        were two of the first and main manufacturers to develop the initial MIDI 
        standard so that synthesisers could be patched together. Roland developed 
        the first MIDI interface for a computer, allowing computer control of 
        a synthesiser.</p>
      <p>MIDI specifies 16 separate logical MIDI Channels. These are only channels 
        in the logical sense; all messages for all channels travel along the same 
        piece of wire. Therefore, with a single MIDI cable you can control up 
        to 16 different instruments at once. It can do this because MIDI instruments 
        typically only &#8220;listen&#8221; on one channel at a time (unless it 
        is a poly-timbrel instrument). For example, you might have a computer 
        (as a sequencer) sending MIDI information to a number of instruments listening 
        on different channels, if you change the channel the data is transmitted 
        on, another synthesiser (or machine) will act on the command messages. 
        It is important to remember is that both the sending device (eg, the computer) 
        and the receiving device (eg the synthesiser) must be set to the same 
        MIDI Channel, or no sound will result. MIDI messages typically take the 
        form of &#8216;Note On&#8217;, &#8216;Note Off&#8217; or &#8216;Controller 
        Change&#8217;.</p>
      <p>There are two types of MIDI messages: Channel messages and System messages. 
        A Channel message includes a Channel number within the message and it 
        is received and understood by devices which are set to respond to messages 
        on that particular Channel, and ignored by devices set to a different 
        Channel. The most basic Channel message is a Note On message. When you 
        press a key on a synthesiser keyboard, a Note On message is sent out with 
        the specific key number and channel encoded within it. When you release 
        the key, a corresponding Note Off message is sent. Other information can 
        be carried by a Channel message, such as Velocity, Volume, Pitch Bend, 
        Aftertouch and Controller.</p>
      <p>A System message is meant to be received and understood by all devices 
        that are connected, regardless of their Channel setting. These messages 
        control synchronisation between devices, as well as special manufacturer-specific 
        modes of operation. A System message can have a manufacturer and device 
        code embedded within it so that only a specific device will respond to 
        the message.</p>
      <p> A Program Change message causes any devices tuned to the same Channel 
        to change internal settings corresponding to the number sent. On many 
        synthesisers, this causes a change in patch (or instrument sound). MIDI 
        specifies a range of 128 Program Change numbers. Most synthesisers do 
        not have the same sound on the same patch number. General MIDI is a specification 
        to overcome this, specifying which sounds should be on which channels. 
        This is to make it easier to play standard MIDI files across different 
        synthesisers and achieve an acceptable result.</p>
      <p>A MIDI cable is a cable with a 5-pin DIN connector on each end, with 
        the centre three pins connected through to the other end. There are three 
        MIDI connectors: MIDI IN, MIDI OUT and MIDI THRU. MIDI IN is for receiving 
        MIDI messages from other devices, MIDI OUT is for sending messages to 
        the devices connected, and MIDI THRU sends a copy of the messages received 
        via MIDI IN all other devices.</p>
      <p>MIDI is useful for musical instruments as it is not very difficult to 
        convert analog electrical information from sensors to MIDI information. 
        From there is a relatively trivial matter to send this information into 
        a computer and make use of it in some software, for example to control 
        a sound synthesis engine. However, MIDI can have some severe limitations, 
        particularly when used for digital instrument control for new music. Primarily, 
        these are a maximum resolution of 127 steps (7-bit), a structure based 
        on equal temperament and limited bandwidth. OpenSound Control is a network 
        protocol which overcomes these limitations and which is becoming more 
        popular with instrument builders. It is also possible to send MIDI information 
        over faster transports, such USB, ethernet and Firewire interfaces. However, 
        this only overcomes one of MIDI&#8217;s limitations.<br>
      </p></td>
    <!-- InstanceEndEditable --></tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
  </tr>
  <tr> 
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
  </tr>
</table>
<blockquote> 
  <p name="Map"> 
    <map name="Map">
      <area shape="rect" coords="4,4,41,29" href="http://jmusic.ci.qut.edu" target="_blank" alt="jMusic">
      <area shape="rect" coords="43,5,80,31" href="http://www.ozco.gov.au" target="_blank" alt="Australia Council">
      <area shape="rect" coords="83,4,108,29" href="http://www.qut.com" target="_blank" alt="Queensland University of Technology">
    </map>
    <map name="Map2">
      <area shape="rect" coords="702,1,758,12" href="../extras/sitemap.html" target="_self" alt="Sitemap">
      <area shape="rect" coords="629,1,687,12" href="../extras/contact.html" target="_self" alt="Contact">
      <area shape="rect" coords="574,1,615,14" href="../index.html" target="_self" alt="Home">
    </map>
    <map name="Map3">
      <area shape="rect" coords="553,5,601,18" href="#" alt="Home">
      <area shape="rect" coords="612,4,671,18" href="#">
      <area shape="rect" coords="683,3,735,19" href="#">
      <area shape="rect" coords="9,8,227,59" href="#" target="index.html">
    </map>
    <map name="Map4">
      <area shape="rect" coords="6,9,40,41" href="http://www.qut.com" target="_blank" alt="http://www.qut.com">
      <area shape="rect" coords="44,14,87,42" href="http://explodingart.com/jmusic" target="_blank" alt="http://explodingart.com/jmusic">
      <area shape="rect" coords="90,9,138,43" href="http://www.ozco.gov.au" target="_parent" alt="http://www.ozco.gov.au">
      <area shape="rect" coords="313,13,512,36" href="../contact.html">
    </map>
  </p>
</blockquote>
<map name="Map5">
  <area shape="rect" coords="-7,4,228,51" href="../index.htm" target="_self" alt="Digital Instrument making">
  <area shape="rect" coords="595,2,658,16" href="../index.htm">
  <area shape="rect" coords="677,2,754,18" href="../extras/contact.htm" alt="Contact">
</map>
</body>
<!-- InstanceEnd --></html>
